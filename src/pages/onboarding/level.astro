---
import Button from "../../components/button/Button.astro";
import Layout from "../../layouts/Layout.astro";
import { getAuthenticatedUser, getAuthTokens } from "../../utils/serverAuth";
import { getAllLevels, transformLevelForUI, getLevelIdByName, assignLevelToUserSafely, getUserLevel } from "../../utils/levelUtils";

export const prerender = false;

// Verificar autenticaci√≥n en SSR
const currentUser = await getAuthenticatedUser(Astro.cookies);

if (!currentUser) {
  // Usuario no autenticado - redirigir al signin
  return Astro.redirect("/signin");
}

// Obtener tokens para las consultas a Supabase
const { accessToken } = getAuthTokens(Astro.cookies);

const dbLevels = await getAllLevels(accessToken || undefined);

const levels = dbLevels.map(transformLevelForUI);


// Verificar si el usuario ya tiene un nivel asignado
const userCurrentLevel = await getUserLevel(currentUser.id, accessToken || undefined);
const userLevelName = userCurrentLevel ? userCurrentLevel.title?.toLowerCase() : null;

// Obtener el nivel actual de la URL, formulario o nivel del usuario
const currentLevel = Astro.url.searchParams.get("level") || userLevelName || "";

// Manejar el env√≠o del formulario POST
if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData();
    const selectedLevel = formData.get("level")?.toString();
    
    if (!selectedLevel) {
      return Astro.redirect("/onboarding/level?error=no-level");
    }
    
    // Guardar el nivel en la base de datos
    if (selectedLevel !== "assessment") {
      const { accessToken: postAccessToken } = getAuthTokens(Astro.cookies);
      const levelId = await getLevelIdByName(selectedLevel, postAccessToken || undefined);
      if (levelId) {
        const success = await assignLevelToUserSafely(levelId, currentUser.id, postAccessToken || undefined);
        if (!success) {
          console.error("SSR: Failed to assign level to user");
          return Astro.redirect("/onboarding/level?error=database");
        }
      }
    }
    
    // Redirigir al siguiente paso del onboarding
    if (selectedLevel === "assessment") {
      return Astro.redirect("/onboarding/assessment");
    } else {
      return Astro.redirect("/onboarding/topic?level=" + selectedLevel);
    }
    
  } catch (error) {
    console.error("SSR: Error processing level form:", error);
    return Astro.redirect("/onboarding/level?error=processing");
  }
}

// Obtener errores de la URL si los hay
const error = Astro.url.searchParams.get("error");
---

<Layout>
  <div class="min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 py-12 px-4">
    <div class="max-w-6xl mx-auto">
      
      <!-- Encabezado -->
      <div class="text-center mb-12">
        <div class="text-6xl mb-6">üéØ</div>
        <h1 class="text-4xl font-bold text-gray-900 mb-4">
          ¬°Hola, {currentUser.name}! üëã
        </h1>
        <h2 class="text-3xl font-bold text-gray-900 mb-4">
          ¬øCu√°l es tu nivel de ingl√©s?
        </h2>
        <p class="text-xl text-gray-600 max-w-2xl mx-auto">
          Selecciona tu nivel actual para personalizar tu experiencia de aprendizaje. 
          No te preocupes, siempre puedes cambiarlo m√°s tarde.
        </p>
        
        {userCurrentLevel && (
          <div class="mt-6 bg-blue-50 border border-blue-200 rounded-lg p-4 max-w-md mx-auto">
            <div class="flex items-center">
              <div class="text-2xl mr-3">{userCurrentLevel.icon}</div>
              <div>
                <p class="text-sm font-medium text-blue-800">
                  Nivel actual: {userCurrentLevel.title} ({userCurrentLevel.sub_title})
                </p>
                <p class="text-xs text-blue-600">
                  Puedes cambiar tu nivel seleccionando uno diferente
                </p>
              </div>
            </div>
          </div>
        )}
        
        <!-- Mostrar errores si los hay -->
        {error && (
          <div class="mt-6 bg-red-50 border border-red-200 rounded-lg p-4 max-w-md mx-auto">
            <div class="flex">
              <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                </svg>
              </div>
              <div class="ml-3">
                <p class="text-sm text-red-800">
                  {error === "no-level" && "Por favor selecciona un nivel antes de continuar."}
                  {error === "processing" && "Hubo un error al procesar tu selecci√≥n. Int√©ntalo de nuevo."}
                  {error === "database" && "Error al guardar en la base de datos. Int√©ntalo de nuevo."}
                </p>
              </div>
            </div>
          </div>
        )}
      </div>

      <!-- Progress Indicator -->
      <div class="flex justify-center mb-12">
        <div class="flex items-center space-x-2">
          <div class="w-8 h-2 bg-blue-600 rounded-full"></div>
          <div class="w-8 h-2 bg-gray-200 rounded-full"></div>
        </div>
        <span class="ml-4 text-sm text-gray-500">Step 1 of 2</span>
      </div>

      <!-- Formulario de selecci√≥n de nivel -->
      <form method="POST" class="space-y-8">
        
        <!-- Verificar si hay niveles disponibles -->
        {levels.length === 0 && (
          <div class="text-center py-12">
            <div class="text-6xl mb-4">‚ö†Ô∏è</div>
            <h3 class="text-2xl font-bold text-gray-900 mb-4">No hay niveles disponibles</h3>
            <p class="text-gray-600 mb-4">
              Parece que no se pudieron cargar los niveles desde la base de datos.
            </p>
            <button 
              type="button" 
              onclick="window.location.reload()"
              class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"
            >
              Recargar p√°gina
            </button>
          </div>
        )}
        
        <!-- Level Selection Grid -->
        {levels.length > 0 && (
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12">
          {levels.map((level) => (
            <label class="level-card cursor-pointer" for={level.id}>
              <input 
                type="radio" 
                name="level" 
                id={level.id} 
                value={level.id}
                class="sr-only peer"
                checked={currentLevel === level.id}
              />
              <div class="bg-white rounded-2xl border-2 border-gray-100 p-6 h-full transition-all duration-300 hover:border-blue-300 hover:shadow-xl hover:-translate-y-1 peer-checked:border-blue-500 peer-checked:bg-blue-50 peer-checked:shadow-xl">
                <!-- Icon and Level -->
                <div class="flex items-center justify-between mb-4">
                  <div class="text-3xl">{level.icon}</div>
                  <div class="text-right">
                    <h3 class="text-xl font-bold text-gray-900 peer-checked:text-blue-600 transition-colors">
                      {level.title}
                    </h3>
                    <span class="text-sm font-medium text-blue-600 bg-blue-100 px-2 py-1 rounded-full">
                      {level.subtitle}
                    </span>
                  </div>
                </div>

                <!-- Description -->
                <p class="text-gray-600 mb-6 leading-relaxed">
                  {level.description}
                </p>

                <!-- Features -->
                <div class="space-y-2">
                  <h4 class="font-medium text-gray-900">You'll learn:</h4>
                  <ul class="space-y-1">
                    {level.features.map((feature) => (
                      <li class="text-sm text-gray-600 flex items-center">
                        <svg class="w-4 h-4 text-green-500 mr-2 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                        </svg>
                        {feature}
                      </li>
                    ))}
                  </ul>
                </div>

                <!-- Selection Indicator -->
                <div class="mt-6 flex justify-center">
                  <div class="w-6 h-6 border-2 border-gray-300 rounded-full flex items-center justify-center peer-checked:border-blue-500">
                    <div class="w-3 h-3 bg-blue-500 rounded-full opacity-0 peer-checked:opacity-100 absolute"></div>
                  </div>
                </div>
              </div>
            </label>
          ))}
        </div>
        )}

        <!-- Bot√≥n personalizado para "Not sure" -->
        {levels.length > 0 && (
        <div class="text-center mb-8">
          <label class="level-card cursor-pointer inline-block" for="not-sure">
            <input 
              type="radio" 
              name="level" 
              id="not-sure" 
              value="assessment"
              class="sr-only peer"
              checked={currentLevel === "assessment"}
            />
            <div class="bg-gray-50 border-2 border-gray-200 rounded-xl p-4 transition-all duration-300 hover:border-orange-300 hover:bg-orange-50 peer-checked:border-orange-500 peer-checked:bg-orange-50">
              <div class="flex items-center space-x-3">
                <div class="text-2xl">ü§î</div>
                <div>
                  <h3 class="font-semibold text-gray-900">Not sure about your level?</h3>
                  <p class="text-sm text-gray-600">Take a quick assessment to find out</p>
                </div>
              </div>
            </div>
          </label>
        </div>
        )}

        <!-- Action Buttons -->
        {levels.length > 0 && (
        <div class="flex flex-col sm:flex-row justify-between items-center gap-4">
          <a href="/signin" class="inline-flex items-center border border-gray-300 text-gray-700 hover:bg-gray-50 focus:ring-gray-500 font-semibold py-2 px-4 rounded transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 w-full sm:w-auto">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
            Back
          </a>
          
          <div class="text-center flex-1">
            <p class="text-sm text-gray-500">
              Your level can be adjusted later in your profile settings
            </p>
          </div>
          
          <Button 
            type="submit" 
            id="continue-btn"
            class="continue-button w-full sm:w-auto font-semibold py-2 px-4 rounded transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2"
          >
            Continue
            <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </Button>
        </div>
        )}
      </form>
    </div>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('form');
    
    if (form) {
      form.addEventListener('submit', function(e) {
        const selectedLevel = document.querySelector('input[name="level"]:checked');
        
        if (!selectedLevel) {
          e.preventDefault();
          alert('Por favor selecciona un nivel antes de continuar.');
          return false;
        }
      });
    }
  });
</script>

  <style>
    /* Estilos para el bot√≥n Continue basado en selecci√≥n */
    .continue-button {
      background-color: #9ca3af;
      color: white;
      cursor: not-allowed;
    }
    
    form:has(input[name="level"]:checked) .continue-button {
      background-color: #2563eb;
      color: white;
      cursor: pointer;
    }
    
    form:has(input[name="level"]:checked) .continue-button:hover {
      background-color: #1d4ed8;
    }
    
    /* Estilos existentes para las cards */
    .level-card input[type="radio"]:checked + div {
      border-color: #3b82f6;
      background-color: #eff6ff;
    }
    
    .level-card input[type="radio"]:checked + div h3 {
      color: #3b82f6;
    }

    .level-card input[type="radio"]:checked + div .w-6 {
      border-color: #3b82f6;
    }

    .level-card input[type="radio"]:checked + div .absolute {
      opacity: 1;
    }

    .level-card {
      transition: all 0.2s ease;
    }
    
    .level-card:hover {
      transform: translateY(-2px);
    }
  </style>

